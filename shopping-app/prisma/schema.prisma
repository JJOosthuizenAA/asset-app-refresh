generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CatalogStatus {
  PENDING
  PROCESSED
  FAILED
}

enum ExportType {
  WORD
  EXCEL
  CSV
  API
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  catalogs Catalog[]
  lists    ShoppingList[]
  exports  Export[]
}

model Catalog {
  id             String        @id @default(cuid())
  userId         String
  title          String
  uploadDate     DateTime      @default(now())
  status         CatalogStatus @default(PROCESSED)
  sourceFilePath String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  pages   CatalogPage[]
  exports Export[]
}

model CatalogPage {
  id         String   @id @default(cuid())
  catalogId  String
  pageNumber Int
  imagePath  String
  parsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  catalog  Catalog  @relation(fields: [catalogId], references: [id])
  products Product[]
}

model Product {
  id            String   @id @default(cuid())
  pageId        String
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  currency      String   @default("ZAR")
  imageCropPath String?
  positionX     Int?
  positionY     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  page      CatalogPage        @relation(fields: [pageId], references: [id])
  listItems ShoppingListItem[]
}

model ShoppingList {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())

  user  User               @relation(fields: [userId], references: [id])
  items ShoppingListItem[]
}

model ShoppingListItem {
  id        String   @id @default(cuid())
  listId    String
  productId String
  quantity  Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())

  list    ShoppingList @relation(fields: [listId], references: [id])
  product Product      @relation(fields: [productId], references: [id])
}

model Export {
  id         String     @id @default(cuid())
  userId     String
  catalogId  String
  exportType ExportType
  createdAt  DateTime   @default(now())

  user    User    @relation(fields: [userId], references: [id])
  catalog Catalog @relation(fields: [catalogId], references: [id])
}
